name: Initialize Fork

on:
  push:
    branches:
      - main

permissions:
  contents: read

env:
  TEMPLATE_NAME: "OSDU SPI Management Template"
  INTRO_MESSAGE: "Welcome to the OSDU SPI Management Template! This template will help you maintain a long-lived fork of an upstream OSDU repository."

jobs:
  check_template:
    name: Check if template repository
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      is_template: ${{ steps.check.outputs.is_template }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Check repository type
        id: check
        uses: ./.github/local-actions/template-protection-check
        with:
          is_template_var: ${{ vars.IS_TEMPLATE }}
          github_is_template: ${{ github.event.repository.is_template }}

      - name: Add job summary
        run: |
          if [[ "${{ steps.check.outputs.is_template }}" == "true" ]]; then
            echo "### Template Repository Detected" >> $GITHUB_STEP_SUMMARY
            echo "Initialization blocked - this is a template development repository" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Repository Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "This is a fork instance - proceeding with initialization checks" >> $GITHUB_STEP_SUMMARY
          fi

  check_initialization:
    name: Check initialization status
    needs: check_template
    if: needs.check_template.outputs.is_template == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
    outputs:
      already_initialized: ${{ steps.check.outputs.already_initialized }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
        with:
          fetch-depth: 0

      - name: Check if already initialized
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Reading issues and repository state
        run: |
          # Check repository variables first (primary indicator)
          if [ "${{ vars.INITIALIZATION_COMPLETE }}" = "true" ]; then
            echo "Repository already initialized (INITIALIZATION_COMPLETE variable is true)"
            echo "already_initialized=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if initialization issue already exists
          ISSUE_COUNT=$(gh issue list --label "initialization" --json number --jq 'length')
          if [ "$ISSUE_COUNT" != "0" ]; then
            echo "Initialization issue already exists"
            echo "already_initialized=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if all branches exist (secondary check)
          if git rev-parse --verify origin/main >/dev/null 2>&1 && \
             git rev-parse --verify origin/fork_upstream >/dev/null 2>&1 && \
             git rev-parse --verify origin/fork_integration >/dev/null 2>&1; then
            echo "All required branches exist"
            echo "already_initialized=true" >> $GITHUB_OUTPUT
          else
            echo "Repository needs initialization"
            echo "already_initialized=false" >> $GITHUB_OUTPUT
          fi

  create_initialization_issue:
    name: Create initialization issue
    needs: [check_template, check_initialization]
    if: |
      needs.check_template.outputs.is_template == 'false' &&
      needs.check_initialization.outputs.already_initialized == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    outputs:
      issue-url: ${{ steps.create-issue.outputs.ISSUE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Configure Git
        uses: ./.github/local-actions/configure-git

      - name: Create all system labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Creating labels
        run: |
          echo "Creating system labels from configuration..."
          
          # Read labels from JSON configuration
          labels=$(cat .github/labels.json | jq -r '.labels[] | @base64')
          
          # Create each label
          for label in $labels; do
            _jq() {
              echo ${label} | base64 --decode | jq -r ${1}
            }
            
            name=$(_jq '.name')
            description=$(_jq '.description')
            color=$(_jq '.color')
            
            echo "Creating label: $name"
            gh label create "$name" \
              --description "$description" \
              --color "$color" || echo "Label $name already exists"
          done
          
          echo "All system labels created"

      - name: Create initialization issue
        id: create-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Creating issues
        run: |
          issue_url=$(gh issue create \
            --title "Repository Initialization Required" \
            --body-file .github/local-actions/templates/initialization-welcome.md \
            --label "initialization")
          echo "ISSUE_URL=$issue_url" >> "$GITHUB_OUTPUT"
          echo "Created initialization issue: $issue_url"

          echo "### Initialization Required" >> $GITHUB_STEP_SUMMARY
          echo "Created initialization issue: $issue_url" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please reply to the issue with your upstream repository URL to begin setup." >> $GITHUB_STEP_SUMMARY
